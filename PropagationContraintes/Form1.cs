using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Linq;
using ConstraintProgramming;

namespace PropagationContraintes
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private Sudoku GetTestSudoku9()
        {
            Sudoku S = new Sudoku(9);
            S.ChargerUnProblème(@",,8,3,,,,7,,6,5,,,,,,,3,3,7,,6,,,9,,,,3,6,,1,,5,9,,9,,,5,,6,,,8,,2,5,,7,,4,3,,,,3,,,1,,8,9,5,,,,,,,4,2,,1,,,,4,3,,");
            S.ChargerUneSolutionRéférence(@"2,9,8,3,4,5,6,7,1,6,5,4,1,9,7,8,2,3,3,7,1,6,2,8,9,5,4,8,3,6,4,1,2,5,9,7,9,4,7,5,3,6,2,1,8,1,2,5,8,7,9,4,3,6,4,6,3,2,5,1,7,8,9,5,8,9,7,6,3,1,4,2,7,1,2,9,8,4,3,6,5");
            //sudoku 9*9.
            return S;
        }

        private Sudoku GetTestSudoku16()
        {
            Sudoku S = new Sudoku(16);
            S.ChargerUnProblème(@"7,,,,15,10,,16,,8,5,,6,,,1,6,,,1,5,8,3,7,9,,,,,4,,12,,,,,,6,2,,,13,,,,9,,8,8,,,,,1,,13,7,3,,,,,5,,,,1,12,6,11,16,,5,2,13,,,8,,,,,11,,12,,,2,6,,,9,16,,,,,16,7,6,,9,4,,,,1,14,,2,11,5,,,,14,10,3,,5,4,7,11,,15,12,,6,1,,8,15,,13,14,3,2,,9,10,12,,,,4,14,5,,11,15,,,,12,6,,9,13,2,,,,,3,9,,,12,15,,,8,,16,,,,,12,,,4,6,1,,11,7,13,5,15,,,,3,,,,,11,9,10,,14,,,,,16,14,,16,,,,15,,,9,3,,,,,,9,,4,,,,,10,13,6,2,7,14,,,15,12,,,2,,14,5,,8,,16,15,,,,9");
            S.ChargerUneSolutionRéférence(@"7,9,13,4,15,10,12,16,14,8,5,2,6,11,3,1,6,2,14,1,5,8,3,7,9,16,10,11,13,4,15,12,5,12,3,10,14,6,2,11,1,13,15,4,7,9,16,8,8,11,15,16,4,1,9,13,7,3,12,6,10,14,5,2,10,15,1,12,6,11,16,14,5,2,13,3,4,8,9,7,3,4,11,5,12,7,1,2,6,15,8,9,16,10,14,13,13,16,7,6,8,9,4,15,12,10,1,14,3,2,11,5,2,8,9,14,10,3,13,5,4,7,11,16,15,12,1,6,1,6,8,15,16,13,14,3,2,5,9,10,12,7,4,11,4,14,5,7,11,15,10,8,16,12,6,1,9,13,2,3,11,13,2,3,9,5,7,12,15,14,4,8,1,16,6,10,16,10,12,9,2,4,6,1,3,11,7,13,5,15,8,14,15,3,6,8,13,12,11,9,10,4,14,5,2,1,7,16,14,1,16,13,7,2,15,6,11,9,3,12,8,5,10,4,9,5,4,11,1,16,8,10,13,6,2,7,14,3,12,15,12,7,10,2,3,14,5,4,8,1,16,15,11,6,13,9");
            //sudoku 16*16
            return S;
        }

        private Sudoku GetTestSudoku25()
        {
            Sudoku S = new Sudoku(25);
            S.ChargerUnProblème(@"9,6,,,,,,,,,,,,16,,13,2,,,,,,,,,12,,22,,5,6,,,,14,17,,,,,24,,,,25,,,,,,,4,,,21,7,,,,2,,6,23,,25,,17,16,,,,13,,12,,,,10,,,,,,,,,7,,2,,,,,,6,,,22,8,,25,,,,,,,,22,,,,,,,,,7,,,,,,,,,,,,,,,,10,,,13,16,11,,,,,8,,,,,22,,22,,,,,,,,,7,18,4,,,,,,,,,,,,20,,,,17,9,,,5,4,,,23,,6,,15,2,,,,24,1,,,,,2,10,,6,11,,,,,17,,20,,,24,15,,,,3,,4,9,,23,20,,,,,,19,,,11,,,12,,,,,,,,,18,,7,,,,13,25,,,,,,,22,,,,,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,7,,,1,18,14,,5,,,14,,,,,,,21,,,,,,,,,19,7,3,,,,,,,,,8,,,,10,,,5,9,,,18,15,,,16,,4,,22,,,,,,18,7,17,,,2,14,,19,3,,,,,22,,9,,,13,17,,7,,2,,,,,,11,,,,,,21,,,13,,,23,,,,3,12,,8,,,7,,,,,17,13,,,,,,,15,,,,,,,,,,11,1,24,,15,,,,,,,,,,,,,,,,,,15,,,,10,,,,9,,,3,,,,,,,14,,,,,,,25,,23,13,,,,,,,,,,12,,,,1,,,11,16,,,,,,18,,,,9,,,,,,,19,5,21,,,23,2,,17,15,6,11,,12,,14,13,,,,19,,22,,4,,,,,,10,,,,,4,,20,,,,,,7,,,5,2,,8,,,3,,,,,19,18,,,,,,,,17,,,,,,,,,1,24,6,,8,,,,,,21,17,19,,,,,6,,,,,11,,,,13,,,,9,,,3,");
            return S;
        }
        private Sudoku GetTestSudoku25_60pc()
        {
            Sudoku S = new Sudoku(25);
            S.ChargerUnProblème(@"9,6,8,20,7,17,,3,5,,24,22,,16,19,13,2,,,,,25,,,11,,13,22,18,,,16,,,14,17,9,4,21,,,3,19,20,25,2,23,10,,,1,,14,3,,7,,10,19,,,6,23,5,,,17,16,22,15,24,13,20,,,,,10,,,24,25,20,18,,13,7,1,2,12,,9,23,21,,3,,22,,,,,23,2,,21,9,,,13,20,3,14,15,10,8,1,,,11,,19,17,4,18,7,19,4,23,,,,18,,9,,13,,11,5,21,6,20,8,17,,,,22,,,,,21,15,3,2,,,7,,,,25,,10,11,1,13,12,17,,24,20,19,13,25,17,9,,20,,,14,21,,19,,,15,,7,,,,1,11,3,,,2,10,18,,11,,8,13,16,,7,20,,22,24,15,19,14,,,12,4,9,,23,20,8,1,24,14,15,,22,25,11,,2,12,10,17,23,4,9,,,13,,6,,21,18,23,13,,20,,15,19,3,6,,,,4,7,,16,,1,14,5,,21,,,,,9,8,4,,22,,11,,,17,24,6,13,3,10,5,7,23,19,1,18,14,,5,24,11,14,22,23,12,25,4,16,21,1,10,,18,6,,13,,19,,,,2,17,,7,2,17,19,,14,1,13,10,,,,9,,20,18,15,24,21,16,6,,11,22,16,1,21,10,,18,,17,24,5,,14,15,,3,,12,25,4,22,20,9,,23,13,,,,,2,19,3,,8,,11,12,25,1,6,,,24,15,13,,10,23,9,4,,,12,11,8,16,,,2,25,14,,,13,21,9,22,10,,,,,1,6,,14,18,,4,9,11,,24,,,5,10,7,23,22,16,20,,19,2,8,,13,,3,24,22,15,1,13,4,10,5,21,23,9,,20,3,16,7,25,,6,,14,,12,,2,,21,25,5,23,13,6,,17,,4,,19,24,2,12,14,8,3,1,18,,11,16,20,,,24,,18,,4,11,,3,6,16,13,,1,,,21,10,20,23,,,,15,6,11,3,,16,,,2,1,24,19,,,7,,25,15,,,9,10,,,21,8,,9,,13,1,,21,,7,12,,5,2,17,8,22,,3,,16,11,,19,18,6,23,2,,22,10,25,17,16,20,19,15,,3,18,9,1,,,11,8,,14,,13,12,21,,19,15,25,5,18,6,23,8,,24,,,20,4,,,2,7,9,,16,,1");
            S.ChargerUneSolutionRéférence(@"9,6,8,20,7,17,23,3,5,1,24,22,18,16,19,13,2,4,12,10,21,25,14,15,11,12,13,22,18,5,6,16,8,15,14,17,9,4,21,11,24,3,19,20,25,2,23,10,1,7,1,4,14,3,21,7,11,10,19,2,8,6,23,5,25,18,17,16,22,15,24,13,20,12,9,11,15,10,19,17,24,25,20,18,4,13,7,1,2,12,14,9,23,21,6,3,16,22,8,5,25,16,23,2,24,21,9,12,22,13,20,3,14,15,10,8,1,7,5,11,6,19,17,4,18,7,19,4,23,3,12,24,18,10,9,1,13,16,11,5,21,6,20,8,17,25,15,2,22,14,22,5,16,21,15,3,2,23,6,7,18,4,9,25,14,10,11,1,13,12,17,8,24,20,19,13,25,17,9,12,20,5,4,14,21,23,19,6,8,15,2,7,22,18,24,1,11,3,10,16,2,10,18,6,11,1,8,13,16,17,7 ,20,21,22,24,15,19,14,25,3,12,4,9,5,23,20,8,1,24,14,15,19,22,25,11,3,2,12,10,17,23,4,9,16,5,13,18,6,7,21,18,23,13,25,20,9,15,19,3,6,22,11,8,4,7,17,16,2,1,14,5,12,21,24,10,15,12,9,8,4,2, 22,21,11,20,16,17,24,6,13,3,10,5,7,23,19,1,18,14,25,5,24,11,14,22,23,12,25,4,16,21,1,10,20,18,6,8,13,9,19,7,3,15,2,17,3,7,2,17,19,8,14,1,13,10,12,25,5,9,23,20,18,15,24,21,16,6,4,11,22,16,1,21,10,6,18,7,17,24,5,2,14,15,19,3,11,12,25,4,22,20,9,8,23,13,17,20,7,16,2,19,3,14,8,18,11,12,25,1,6,5,21,24,15,13,22,10,23,9,4,19,3,12,11,8,16,20,7,2,25,14,18,17,13,21,9,22,10,23,4, 15,5,1,6,24,14,18,6,4,9,11,1,24,12,15,5,10,7,23,22,16,20,17,19,2,8,21,13,25,3,24,22,15,1,13,4,10,5,21,23,9,8,20,3,16,7,25,11,6,18,14,17,12,19,2,10,21,25,5,23,13,6,9,17,22,4,15,19,24,2,12,14,8,3,1,18,7,11,16,20,8,14,24,7,18,22,4,11,9,3,6,16,13,12,1,19,5,21,10,20,23,2,25,17,15,6,11,3,12,16,14,13,2,1,24,19,23,22,7,4,25,15,18,17,9,10,20,5,21,8,4,9,20,13,1,10,21,15,7,12,25 ,5,2,17,8,22,23,3,14,16,11,24,19,18,6,23,2,5,22,10,25,17,16,20,19,15,21,3,18,9,1,24,6,11,8,4,14,7,13,12,21,17,19,15,25,5,18,6,23,8,10,24,11,14,20,4,13,12,2,7,9,22,16,3,1");
                        
            return S;
        }

        private Sudoku GetTestSudoku25_37pc()
        {
            Sudoku S = new Sudoku(25);
            S.ChargerUnProblème(@"9,6,8,20,7,17,,3,5,,24,22,,,19,13,2,,,,,25,,,11,,13,22,18,,,16,,,14,17,,,21,,,3,19,20,25,2,23,10,,,1,,14,3,,7,,10,19,,,6,23,5,,,17,16,22,15,24,,20,,,,,,,,24,25,20,18,,13,7,1,,12,,9,,21,,3,,22,,,,,23,2,,21,9,,,13,20,3,14,15,10,8,1,,,11,,19,17,4,18,7,19,,23,,,,18,,9,,,,11,5,21,,20,8,17,,,,22,,,,,,15,3,2,,,7,,,,25,,10,11,1,13,12,17,,24,20,19,13,25,17,9,,20,,,14,21,,19,,,,,7,,,,1,11,3,,,2,,,,11,,8,13,16,,7,,,22,24,15,19,14,,,12,4,9,,23,20,8,1,24,14,15,,22,25,11,,2,12,10,17,,4,9,,,13,,,,21,18,23,13,,,,15,19,3,,,,,4,7,,16,,1,14,5,,21,,,,,9,8,4,,22,,11,,,17,24,6,13,3,10,5,7,23,19,,18,,,5,24,11,14,22,23,12,25,,16,,1,10,,18,6,,13,,19,,,,2,17,,7,2,17,19,,14,1,13,10,,,,9,,20,18,15,24,21,,,,11,22,16,1,21,10,,18,,17,24,5,,14,,,,,12,25,4,22,20, 9,,23,13,,,,,2,19,3,,8,,11,12,25,1,6,,,24,15,,,10,23,,4,,,12,11,8,16,,,2,25,14,,,13,21,9,,10,,,,,1,,,14,18,,4,9,11,,24,,,5,10,7,23,22,16,20,,19,2,,,13,,3,24,22,,1,13,4,10,5,21,23,9,,20,3,16,,25,,6,,14,,12,,,,21,25,5,23,13,6,,17,,4,,19,24,2,,14,8,3,1,18,,11,,,,,24,,18,,4,11,,3,6,16,13,,1,,,21,10,20,23,,,,15,6,11,3,,16,,,2,1,24,19,,,7,,25,15,,,,10,,,21,8,,9,,13,1,,21,,7,12,,5,2,17,8,22,,3,,16,11,,19,18,6,23,2,,22,10,25,17,16,20,19,15,,3,18,9,,,,11,8,,14,,13,12,21,,19,15,25,5,18,6,23,8,,24,,,20,4,,,2,7,9,,16,,1");
            S.ChargerUneSolutionRéférence(@"9,6,8,20,7,17,23,3,5,1,24,22,18,16,19,13,2,4,12,10,21,25,14,15,11,12,13,22,18,5,6,16,8,15,14,17,9,4,21,11,24,3,19,20,25,2,23,10,1,7,1,4,14,3,21,7,11,10,19,2,8,6,23,5,25,18,17,16,22,15,24,13,20,12,9,11,15,10,19,17,24,25,20,18,4,13,7,1,2,12,14,9,23,21,6,3,16,22,8,5,25,16,23,2,24,21,9,12,22,13,20,3,14,15,10,8,1,7,5,11,6,19,17,4,18,7,19,4,23,3,12,24,18,10,9,1,13,16,11,5,21,6,20,8,17,25,15,2,22,14,22,5,16,21,15,3,2,23,6,7,18,4,9,25,14,10,11,1,13,12,17,8,24,20,19,13,25,17,9,12,20,5,4,14,21,23,19,6,8,15,2,7,22,18,24,1,11,3,10,16,2,10,18,6,11,1,8,13,16,17,7 ,20,21,22,24,15,19,14,25,3,12,4,9,5,23,20,8,1,24,14,15,19,22,25,11,3,2,12,10,17,23,4,9,16,5,13,18,6,7,21,18,23,13,25,20,9,15,19,3,6,22,11,8,4,7,17,16,2,1,14,5,12,21,24,10,15,12,9,8,4,2, 22,21,11,20,16,17,24,6,13,3,10,5,7,23,19,1,18,14,25,5,24,11,14,22,23,12,25,4,16,21,1,10,20,18,6,8,13,9,19,7,3,15,2,17,3,7,2,17,19,8,14,1,13,10,12,25,5,9,23,20,18,15,24,21,16,6,4,11,22,16,1,21,10,6,18,7,17,24,5,2,14,15,19,3,11,12,25,4,22,20,9,8,23,13,17,20,7,16,2,19,3,14,8,18,11,12,25,1,6,5,21,24,15,13,22,10,23,9,4,19,3,12,11,8,16,20,7,2,25,14,18,17,13,21,9,22,10,23,4, 15,5,1,6,24,14,18,6,4,9,11,1,24,12,15,5,10,7,23,22,16,20,17,19,2,8,21,13,25,3,24,22,15,1,13,4,10,5,21,23,9,8,20,3,16,7,25,11,6,18,14,17,12,19,2,10,21,25,5,23,13,6,9,17,22,4,15,19,24,2,12,14,8,3,1,18,7,11,16,20,8,14,24,7,18,22,4,11,9,3,6,16,13,12,1,19,5,21,10,20,23,2,25,17,15,6,11,3,12,16,14,13,2,1,24,19,23,22,7,4,25,15,18,17,9,10,20,5,21,8,4,9,20,13,1,10,21,15,7,12,25 ,5,2,17,8,22,23,3,14,16,11,24,19,18,6,23,2,5,22,10,25,17,16,20,19,15,21,3,18,9,1,24,6,11,8,4,14,7,13,12,21,17,19,15,25,5,18,6,23,8,10,24,11,14,20,4,13,12,2,7,9,22,16,3,1");

            return S;
        }

        private void btnLaunch_Click(object sender, EventArgs e)
        {
            long ticks;
            ticks = DateTime.Now.Ticks;


            Sudoku S = GetTestSudoku25_37pc();
            S.PrintProb();
            S.PrintProblèmeEnLigne();
            Console.WriteLine("temps pour créer le problème en ms:"+(DateTime.Now.Ticks - ticks) / TimeSpan.TicksPerMillisecond);

            ticks = DateTime.Now.Ticks;
            S.SolutionFound += new HandleSolution(S_SolutionFound);
            S.ParcourirEspace();
            Console.Out.WriteLine("nombre de choix= " + S.NombreDeChoix.ToString() + "\nnombre de retour en arrière= " + S.NombreDeRetourArrière.ToString());
            Console.WriteLine("temps en ms:" +(DateTime.Now.Ticks - ticks) / TimeSpan.TicksPerMillisecond);
        }

        void S_SolutionFound(CSPProblem E,List<CSPVariable> tuple)
        {
            Print(tuple);
            PrintEnLigne(tuple);
            if (E.ComparerALaReference())
            {
                Console.Out.WriteLine("Solution identique à la référence [OK].");
            }
            else
            {
                Console.Out.WriteLine("Erreur: Solution différente de la référence.");
            }
            if (E.CohérenceDeLaSolution())
            {
                Console.Out.WriteLine("Solution valide.");
            }
            else
            {
                Console.Out.WriteLine("Solution fausse!!!!!!!");
            }

        }

        private void DumpE(CSPProblem E)
        {
            foreach (CSPVariable ed in E.Variables)
            {
                Console.Out.WriteLine(ed.Domaine.Count + "\t" + ed.BinaryConstraints.Count);
            }
        }

        public static void Print(List<CSPVariable> t)
        {
            int saute = 0;
            foreach (CSPVariable k in t)
            {
                saute++;
                Console.Write(k.ElementChoisi.ToString().PadLeft(2) + " ");
                if ((saute % Math.Sqrt(Math.Sqrt(t.Count))) == 0)
                {
                    Console.Out.Write("\b|");
                }
                if (saute == Math.Sqrt(t.Count))
                {
                    Console.WriteLine("");
                    saute = 0;
                }
            }
            Console.Write("\n");
        }
        public static void PrintEnLigne(List<CSPVariable> t)
        {
            foreach (CSPVariable k in t)
            {
                Console.Write(k.ElementChoisi.ToString() + ",");
            }
            Console.Write("\n");
        }

        private void btnNReines_Click(object sender, EventArgs e)
        {
            ProblemeNReines pnr = new ProblemeNReines();
            pnr.SolutionFound += new HandleSolution(pnr_SolutionFound);
            pnr.ParcourirEspace();
        }

        void pnr_SolutionFound(CSPProblem sender, List<CSPVariable> tuple)
        {
            PrintEnLigneReines(tuple);
        }
        public static void PrintEnLigneReines(List<CSPVariable> t)
        {
            foreach (CSPVariable k in t.OrderBy(a=>a.Name))
            {
                Console.Write(k.ElementChoisi.ToString() + ",");
            }
            Console.Write("\n");
        }
        
    }
}